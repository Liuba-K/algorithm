Покупка онлайн билетов на автобус в час пик.
1)Предусловия
-cash(сумма на карточке или налом)>= sumTicket(суммы за билет)
-user(пользователь-клиент желающий купить билет)>0
(возможно для час пика это не актульно, их итак много)

2)постусловия:
-Tickets= Tickets(old)-1*N(кол-во купленных билетов)
(Количество билетов уменьшилось)
-Cash =Cash(old)- N*SumTicket
(количество cash уменьшилось)
-деньги поступили на счет ticketStore(Сервис покупки билетов)

3)инвариант(неизменяемая часть)
-Tickets(Билеты)>=0
(свободные билеты на автобус/проверка билетов в БД)
-sumTicket(сумма за билет)>0

4)собрано из картинки(.ipeg)
абстрактный класс: TicketProvider
Конкретные классы:
Customer
Ticket
CashProvider

5)Интефейсы(думаю, что при усложнении и добавлении классов, возможно понадобиться два интерфейса для базы данных билетов и при взаимодействии с банком)

6)наследование(по диаграмме(.ipeg)) 
TicketProvider родительский для Customer и CashProvider
CashProvider родительский для Customer
Customer содержит объект в виде списка класса Ticket (возможно, тоже является родительским для Ticket)

7)Компоненты на UML2
"TicketStore" состоит из: 
-"CтанцияПродажибилетов"
-"DBConnection"
-"Продажи билетов"
-"Бронирование билетов"
-"АвторизацияПользователя"
"UserApp" состоит из:
-"Поиск билетов"
-"Оплата билетов"
-"Карта банка"
-"Авторизация"
-"ORDER"
-"Графический интерфейс"

9)Контракт:
-числовые значения - Cash, SumTicket
-синхронизация Билетов в БД с ticketStore, a ticketStore параллельно  как со Станцией продажибилетов в Автобусном парке, так и с приложением(поиск билетов).
-синхронизация Авторизации пользователя с картой банка (при оплате картой как в приложении так и в автобусном парке)
-синхронизация cash (суммы на карточке) со счетом в банке
-синхронизация суммы на счете за билеты (sumTicket) с измененной суммой на карте пользователя
..
(-и наверное еще много разных пунктов....)

10)на основании диаграммы(.ipeg):
метрика абстрактного класса=1/4=0,25

11)Присвоить компонентам версию по принципу SemVer 
Так как мы создали первый раз, то для двух основных компонентов:
"TicketStore" 1.0.0
"UserApp" 1.0.0

Для версии в релиз добавляют -rc
Если первая цифра 0, то это этап разработки
Для каждого компонента делается отдельно?
